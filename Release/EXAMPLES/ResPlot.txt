// resolution vs area, no distortion corrections!

//REQUIREMENTS:
//flood dataset, reconstructied

var Sigma = []
var Num = []

var r = 33
var d = r*2+1
var bin = 0.5

for (var i=-r; i<r+1; i++)
{
    var Yarr = []
    var Yarr1 = []
    for (var j=-r; j<r+1;j++)
    {
       Yarr[j] = 0;
       Yarr1[j] = 0;
    }
    Sigma[i] = Yarr;
    Num[i] = Yarr1;
}

var numEvents = events.GetNumEvents()

for (var iEv = 0; iEv<numEvents; iEv++)
{
   //core.clearText()
   //core.print(iEv)
   
   var X = events.GetReconstructedX(iEv)
   var Y = events.GetReconstructedY(iEv)
   
   var xx = events.GetTrueX(iEv)
   var yy = events.GetTrueY(iEv)
   
   var dx = X-xx
   dx *=  dx
   var dy = Y - yy
   dy *=  dy
   
   var dsigma = math.sqrt(dx+dy)
   
   var binX = math.floor( xx / bin )
   var binY = math.floor( yy / bin )
   
   if (binX<-r || binX>r || binY<-r || binY>r) continue
   
   Sigma[binX][binY] = Sigma[binX][binY] + dsigma
   Num[binX][binY] =  Num[binX][binY]  + 1
}

hist.NewHist2D("h1", d, -r*bin, +r*bin, d, -r*bin, r*bin)
for (var i=-r; i<r+1; i++)
{   
    for (var j=-r; j<r+1;j++)
    {
       var si = Sigma[i][j]
       if (si>0)  si = si / Num[i][j]
//       si = math.sqrt(si)*2.35
       core.print(i + "  "+ j+ "  "+  Sigma[i][j] + "  "+  Num[i][j])
       hist.Fill2D( "h1", i*bin, j*bin, si)
    }   
}

hist.Draw( "h1", "colz")

