var tc = 2000;

outwin.Hide()

geowin.Show()
config.Load(core.GetExamplesDir() + "/det0.json")
geowin.ShowGeometry()
geowin.SetZoom(1)

msg.SetTransparent(true)
msg.SetFontSize(20)
msg.Show("A model of compact scintillation camera")
msg.Move(geowin.GetX()+200 , geowin.GetY()+50)
msg.Resize(800, 200)
core.sleep(0.5*tc)

geowin.SetParallel(false)
geowin.SetTheta(60)
geowin.SetPhi(-120)
geowin.UpdateView()

core.sleep(tc)

msg.Show("The camera model consists of:")
config.Replace("DetectorConfig.PMarrays[0].PMarrayData.Activated", false)
config.Replace("DetectorConfig.Sandwich.Slabs[0].fActive", false)
config.Replace("DetectorConfig.Sandwich.Slabs[2].fActive", false)
msg.Append("1. A scintillator")

geowin.Rotate(0, -90, 20)
core.sleep(tc)

msg.Append("2. A reflecting layer")
config.Replace("DetectorConfig.Sandwich.Slabs[2].fActive", true)
core.sleep(tc)

msg.Append("3. A light guide")
config.Replace("DetectorConfig.Sandwich.Slabs[0].fActive", true)
core.sleep(tc)

msg.Append("4. An array of photo-sensors")
config.Replace("DetectorConfig.PMarrays[0].PMarrayData.Activated", true)
core.sleep(tc)
geowin.Rotate(100, 0, 20)
core.sleep(0.5*tc)
geowin.Rotate(-100, 0, 20)
//geowin.ShowPMnumbers()

core.sleep(tc)
geowin.UpdateView()
core.sleep(0.5*tc)

config.Replace("SimulationConfig.GeneralSimConfig.AcceleratorConfig.CheckBeforeTrack", false)
config.Replace("SimulationConfig.GeneralSimConfig.BuildPhotonTracks", true)
config.Replace("SimulationConfig.PointSourcesConfig.PhotPerNodeOptions.PhotPerNodeConstant", 4000)
config.Replace("SimulationConfig.PointSourcesConfig.SinglePositionOptions.SingleX", 0)
config.Replace("SimulationConfig.PointSourcesConfig.SinglePositionOptions.SingleY", 0)

msg.Show("Tracing photons emitted from a point source<br>  at the center of the scintillator")
sim.RunPhotonSources()
geowin.ShowTracksMovie(20, 10, 1, 1, 1, 1, 9)
core.sleep(tc)
geowin.Rotate(60-geowin.GetTheta(), 0, 20)
core.sleep(tc)

geowin.ShowTracks(20)
core.sleep(tc)

geowin.ShowGeometry()
for (var i=0; i<1000; i+=50)
{
  geowin.ShowTracks(i)
  core.sleep(0.01*tc)
}
core.sleep(tc)

msg.Show("We are interested only in the photons which hit the photosensors, which can be detected")
geowin.ShowGeometry()
geowin.ShowTracks(1000, 2)  //Show only red
core.sleep(tc)

geowin.Rotate(70, -geowin.GetPhi(), 50)
geowin.Rotate(-geowin.GetTheta(), -geowin.GetPhi()-90, 50)
core.sleep(tc)

msg.Clear()
msg.Append("This is the distribution of the detected signals over the photosensor array")
outwin.ShowOutputWindow(true, 2)
core.sleep(tc*2)
outwin.ShowOutputWindow(false)
msg.Show("Let us see what distributuion will be obtained<br>  when the source position is shifted")
geowin.ShowSPS_position()
core.sleep(tc)

config.Replace("SimulationConfig.PointSourcesConfig.SinglePositionOptions.SingleX", 7.5)
config.Replace("SimulationConfig.PointSourcesConfig.SinglePositionOptions.SingleY", 2.5)
geowin.ShowSPS_position()
core.sleep(tc)
sim.RunPhotonSources()
for (var i=50; i<4000; i+=50)
{
  geowin.ShowTracks(i,2)
  core.sleep(0.01*tc)
}
//core.sleep(tc)
outwin.ShowOutputWindow(true, 2)
msg.Clear()
core.sleep(tc*2)



