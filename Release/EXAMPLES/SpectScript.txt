// Simulate, prepare, save and optionally send projections to the Niffler program

//----------- Configuration ----------------
   // Communication to Niffler
var sendDataToNiffler = true   
var Url = "ws://127.0.0.1:1234"   //Niffler WebSocket URL
   //camera data
var n_cameras = 15
var firstcamera=0
var lastcamera = 180
  //projection settings
var binsX = 52
var binsY = 60
var mm_per_bin = 0.5
   // file name template to save projection files
var base = "D:/tmp/trioRectInvHighQ_"
//-----------------------------------------------

var confFile = core.GetExamplesDir() + "/SPECT.json"
var fOK = config.Load(confFile)

if (sendDataToNiffler)
{
   var ms = web.Ping(Url)
   core.print("Ping to Niffler: "+ms+" ms") 
}

var dX = 0.5*binsX*mm_per_bin
var dY = 0.5*binsY*mm_per_bin
grwin.ConfigureXYplot(binsX, -dX, dX, binsY, -dY, dY)

var pack = {}
pack["size_x"] = binsX
pack["size_y"] = binsY
pack["n_cameras"] = n_cameras
pack["firstcamera"] = firstcamera
pack["lastcamera"] = lastcamera
pack["axis"] = 0
pack["radius"] = 30
pack["iterations"] = 20
pack["gpu"] = 0
pack["psf"] = 0
pack["subsets"] = 1

var proj = []
for (var i=0; i<n_cameras; i++)
{
   config.Replace( "DetectorConfig.Sandwich.WorldTree[1].Theta" , firstcamera + (lastcamera-firstcamera)*i/(n_cameras-1))
   sim.RunParticleSources()
   rec.ReconstructEvents()
   grwin.PlotDensityXY()
   grwin.ExportTH2AsText(base+i+".dat")
   //var ar =  grwin.GetProjection()  	// -> for direct data transfer
   //proj = proj.concat(ar)  		// -> for direct data transfer
}

//pack["projections"] = proj  		// -> for direct data transfer
pack["load"] = base+".dat"
core.saveObject(base+".mani", pack, true)

if (sendDataToNiffler)  web.SendTextMessage( Url, pack)
