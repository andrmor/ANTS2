
config.Load(core.GetExamplesDir() + "/NewGenSiPM64.json")
sim.RunPhotonSources()

//watchdogs
if (events.countEvents() == 0) core.abort("There are no events to reconstruct")
if (pms.CountPM() != 64) core.abort("Load configuration with 64 SiPMs")

//inits of variales used by minimization
var lastMiniValue = 1e10
var PMpositions = pms.GetPMpositions()
var bActivePMs = []
for (var i=0; i<64; i++) bActivePMs.push(true)

//function which will be minimized for every event
function Functor()
{
       var iEvent  = math.round( arguments[0] ) //has to be converted to int!
       var x           = arguments[1]
       var y           = arguments[2]
       var z           = arguments[3]
       var energy = arguments[4]
       
       var Signals = events.GetPMsignals(iEvent)
       var LRFs = lrf.GetAllLRFs(x, y, z)
      
       var MiniSum = 0
       for (var iPM=0; iPM<64; iPM++)
              if ( bActivePMs[iPM] )
              {
                     var LRF = LRFs[iPM] * energy
                     if (LRF <= 0) return lastMiniValue*1.25 //LRF is not defined in this position
                     
                     var delta = LRF - Signals[iPM]
                     
                     var sigma2 = LRF // + err*err -> err e.g. lrf.GetLRFerror(iPM, x, y, z)
                     MiniSum += delta*delta/sigma2
              }
              
      //enable to see detailed printout (very slow and spammy!)
      /*
      msg.Append("Ev#" + iEvent + " x: " + x + " y:" + y + " E:" + energy + " -> " + MiniSum)
      */
      
      lastMiniValue = MiniSum;
      return MiniSum
}


function reconstruct(from, to)
{
       mini.SetHighPrecision(false)
       mini.SetFunctorName("Functor")
       
       //enable to see detailed printout (very slow and spammy!) 
       /*
       msg.Show()
       msg.Clear()
       msg.Resize(800, 400)
       */
       
       for (var iEvent = from; iEvent<to; iEvent++)
       {
               //CoG
              var Signals = events.GetPMsignals(iEvent)
              var SumX = 0
              var SumY = 0
              var SumSig = 0
              for (var iPM=0; iPM<64; iPM++)
              {
                     if (Signals[iPM] < 5) continue
                     SumSig += Signals[iPM]
                     SumX += Signals[iPM] * PMpositions[iPM][0]
                     SumY += Signals[iPM] * PMpositions[iPM][1]
              }
              var X0 = 0
              var Y0 = 0
              if (SumSig > 0)
              {
                     X0 = SumX / SumSig * 1.2 //CoG x
                     Y0 = SumY / SumSig *1.2   // CoG y
              }
              else
              {
                      events.SetReconstructionOK(iEvent, false);
                      continue
              }
              
              //selecting active PMs for statistical reconstruction
              var numActives = 0
              for (var iPM=0; iPM<64; iPM++)
              {
                     var dx = X0 - PMpositions[iPM][0]
                     var dy = Y0 - PMpositions[iPM][1]
                     if (dx*dx + dy*dy < 225)
                     {
                             bActivePMs[iPM] = true
                             numActives++
                     }
                     else bActivePMs[iPM] = false
              }              
       
              lastMiniValue = 1e10
              mini.Clear()
              
              mini.AddFixedVariable("iEvent", iEvent)
              mini.AddVariable("x", X0, 1) //, -15, 15)
              mini.AddVariable("y", Y0, 1) //, -15, 15)
              mini.AddFixedVariable("z", 0)
              mini.AddLowerLimitedVariable("energy", 1, 0.1, 0)
       
              var success = mini.Run()
              if (success)
              {
                     var res = mini.GetResults()
                     
                     var DegFreedom = numActives - 4 //  numPMs - 1 for each of: sigma,X,Y, Energy
                     if (DegFreedom<1) DegFreedom = 1
                     var chi2 = lastMiniValue / DegFreedom
                     events.SetReconstructed(iEvent, res[1], res[2], res[3], res[4], chi2)
              } 
              else events.SetReconstructionOK(iEvent, false)
       }       
}

var numEvents = events.GetNumEvents()

/*
//reconstruct as in GUI
var t = core.elapsedTimeInMilliseconds()
rec.ReconstructEvents(7, false)
core.print("From GUI (c++): " + (core.elapsedTimeInMilliseconds()-t) + " ms")
*/

/*
//reconstruct without threads
var t = core.elapsedTimeInMilliseconds()
reconstruct(0, numEvents) 
core.print("No threads: " + (core.elapsedTimeInMilliseconds()-t) + " ms")
*/

var numThreads = 7
threads.deleteAll()
var blockSize = math.floor( numEvents / numThreads )
if  (numEvents % numThreads != 0) blockSize++
t = core.elapsedTimeInMilliseconds()
var from = 0
while (from < numEvents)
{
       var to = from + blockSize
       if (to>numEvents) to = numEvents
       //core.print("Thread in range from " + from + " to " + to )
       threads.evaluateFunction(reconstruct, [from, to])
       from = to
}
threads.waitForAll()
core.print("\nUsing " + numThreads + " threads: " + (core.elapsedTimeInMilliseconds()-t) + " ms")
threads.deleteAll()

events.SetReconstructionReady()

