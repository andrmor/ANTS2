//
// Obtain pedestals from a file with PM signals, use PMs further MinDist from the reconstructed position
//   and with signal in the range:  [MinSignal, MaxSignal]
//
var MinDist = 30
var MinSignal = 1
var MaxSignal = 500


var numEvents = events.GetNumEvents()
var numPms = events.GetNumPMs()

var pede = []
var pedeCounter = []
for (var i=0; i<numPms; i++)
{
  pede[i] = 0
  pedeCounter[i] = 0
}
var MinDist2 = MinDist*MinDist

for (var iEvent=0; iEvent<numEvents; iEvent++)
{   
    if ( !events.IsReconstructedGoodEvent(iEvent) ) continue  
    for (var iPM=0; iPM<numPms; iPM++ )
   {
      var DistX2 =  events.GetRho2(iEvent, iPM)
      var DistY2 =  events.GetRho2(iEvent, iPM)    
      if (DistX2+DistY2 < MinDist2) continue
      
      var Sig = events.GetPMsignal(iEvent, iPM)
      if (Sig < MinSignal) continue;
      if (Sig > MaxSignal) continue;
      
      pede[iPM] += Sig
      pedeCounter[iPM]++      
   }
   
   if (iEvent % 500 == 0)
   {
      core.clearText()
      core.print( "Processed "+ iEvent + " events")
    }  
}

var threshold = 2
for (var iPM=0; iPM<numPms; iPM++ )
{
  if (pedeCounter[iPM] < threshold) continue
  pede[iPM] /= pedeCounter[iPM]
  core.print( pede[iPM] )
  var old = config.GetKeyValue( "DetectorConfig.LoadExpDataConfig.AddMulti["+iPM+"][0]" ) //[0]-pedestal, [1]-factor
  config.Replace("DetectorConfig.LoadExpDataConfig.AddMulti["+iPM+"][0]", old + pede[iPM])  
}
   