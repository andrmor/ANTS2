//IP and port for the Ants2 server dispatchers
var server1 = ["127.0.0.1", 1234]
var server2 = ["11.11.11.11", 1234]
var server3 = ["22.22.22.22", 12345]

var Remote = [server1, server2, server3]  // list of remote server dispatchers  
var FileTemplate = "SimTree"                      // filename pattern for the local simulation tree (filename will be: "<pattern>-1.root" for thread #1 )
var eventsPerThread = 200                       // events to simulate per available thread
var localThreads = 4                                    // local threads to use

threads.deleteAll()
threads.setAbortInThreadIsGlobal(false) // abort in one thread does not abort the rest

for (var i = 0; i < Remote.length; i++)
        threads.evaluateScript(  "web.GetAvailableThreads(  \"" + Remote[i][0] + "\"," + Remote[i][1]  + ")"  )
threads.waitForAll()

var remThrs = 0
var remSer = 0
for (var i=threads.countAll()-1; i>-1; i--)
       if ( threads.isAborted(i)) Remote[i].push(0)
       else
       {
              thr =  threads.getResult(i); remThrs += thr; remSer++
              Remote[i].push(thr)  // adding information how many threads to use
       }
core.clearText(); core.print("Found " + remSer + " remote server(s) with " + remThrs + " total available threads" )
threads.deleteAll()


function threadWorker(iThr, Remote)
{
       var availableThreads = Remote[iThr][2]
       if (availableThreads !== 0) 
       {
              var reply = web.OpenSession( Remote[iThr][0], Remote[iThr][1], availableThreads )
              conf["SimulationConfig"]["PointSourcesConfig"]["FloodOptions"]["Nodes"] = availableThreads * eventsPerThread
              web.SendConfig(conf)
              web.RemoteSimulatePhotonSources(FileTemplate+"-"+iThr+".root", true)
              web.Disconnect()
       }       
}

config.Replace( "SimulationConfig.PointSourcesConfig.ControlOptions.Single_Scan_Flood" , 2 )   // enforcing flood sim mode
var conf = config.GetConfig()
core.print("-->Requesting to simulate " + remThrs * eventsPerThread + " events remotely...")
for (var i = 0; i < Remote.length; i++)
      threads.evaluateFunction(threadWorker, [i, Remote])

events.ClearEvents()
if (localThreads > 0)
{
       var numEv = localThreads * eventsPerThread
       core.print("-->Simulating " + numEv + " events locally...")
       config.Replace( "SimulationConfig.PointSourcesConfig.FloodOptions.Nodes", numEv)
       sim.RunPhotonSources(localThreads)
}
core.print("Local simulation finished")
threads.waitForAll()

var remEv = 0
for (var i = 0; i < Remote.length; i++)
{
       if ( !threads.isAborted(i) )
       {
              events.LoadEventsTree(FileTemplate+"-"+i+".root", true)
              remEv += Remote[i][2]
       }
}
core.print("Remote simulation finished")
if (remThrs != remEv) core.print("Only " + remEv * eventsPerThread + " events were simulated remotely!" )
       
threads.deleteAll()       
