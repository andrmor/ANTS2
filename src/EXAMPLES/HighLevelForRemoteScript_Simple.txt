//IP and port for the Ants2 server dispatchers (https://github.com/andrmor/ServDisp)
var server1 = ["127.0.0.1", 1234]             //ServDisp can be run on the same computer - the local IP can be used
var server2 = ["11.11.11.11", 1234]         // <-- modify IP/port for the remote ServDisp!
//....

var Remote = [server1, server2]  // list of remote server dispatchers  
var FileTemplate = "SimTree-"                 // filename pattern for the local simulation tree (filename will be: "<pattern>1.root" for thread #1 )

threads.deleteAll()
threads.setAbortInThreadIsGlobal(false) // abort in one thread does not abort the rest

var conf = config.GetConfig()

function threadWorker(iThr, Remote)
{
       var availableThreads = web.GetAvailableThreads(  Remote[iThr][0], Remote[iThr][1] )
       if (availableThreads > 0)
       {
              var reply = web.OpenSession( Remote[iThr][0], Remote[iThr][1], availableThreads )
              web.SendConfig(conf)
              web.RemoteSimulatePhotonSources(FileTemplate + iThr+".root", true)
              web.Disconnect()
       }
       return availableThreads
}
core.print("-->Requesting remote simulation...")
for (var i = 0; i < Remote.length; i++)
       threads.evaluateFunction(threadWorker, [i, Remote])

events.ClearEvents()
core.print("-->Starting local simulation...")
sim.RunPhotonSources()

core.print("Local simulation finished, waiting for remote...")
threads.waitForAll()

for (var i = 0; i < Remote.length; i++)
{
       if ( !threads.isAborted(i) && threads.getResult(i) > 0)
              events.LoadEventsTree(FileTemplate+i+".root", true)
}
core.print("Simulation finished")     
threads.deleteAll()       
